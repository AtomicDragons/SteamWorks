// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6420.Attempt2;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import org.usfirst.frc6420.Attempt2.commands.*;
import org.usfirst.frc6420.Attempt2.subsystems.*;
import org.usfirst.frc6420.Attempt2.subsystems.RIODuino.Mode;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    public static Vision vision;
    public static LVDash lvdash;
    public static Gearage gearage;
    public static Shifter shifter;
    public static Climb climber;
    public static RIODuino ledcontroller;
    public static Selector selector;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveBase driveBase;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
    	vision = new Vision();
    	gearage = new Gearage();
    	shifter = new Shifter();
    	climber = new Climb();
    	ledcontroller = new RIODuino();
    	selector = new Selector();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBase = new DriveBase();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        

        selector.addCommand( RobotMap.dio5, new AutoLeft() );
        selector.addCommand( RobotMap.dio6, new AutoCenter() );
        selector.addCommand( RobotMap.dio7, new AutoRight() );
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        Robot.ledcontroller.setMode( Mode.SOLID_GREEN );
        RobotMap.gearDrop.set( Value.kForward );
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	if( DriverStation.getInstance().getAlliance() == Alliance.Red ){
    		Robot.ledcontroller.setMode( Mode.PULSE_RED );
    	}else{
    		Robot.ledcontroller.setMode( Mode.PULSE_BLUE );
    	}
    	autonomousCommand = selector.getSelected();
    	if(autonomousCommand == null ){
    		autonomousCommand = new AutoBaseline();
    	}
    	//autonomousCommand = new AutoLeft();
    	RobotMap.gearDrop.set( Value.kForward );
    	LVDash.setString( 5, autonomousCommand.toString() );
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
    	if( DriverStation.getInstance().getAlliance() == Alliance.Red ){
    		Robot.ledcontroller.setMode( Mode.MOVING_RED );
    	}else{
    		Robot.ledcontroller.setMode( Mode.MOVING_BLUE );
    	}
        if (autonomousCommand != null) autonomousCommand.cancel();
        RobotMap.gearDrop.set( Value.kForward );
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
